{
    "id": "b8e3519a-6f51-405f-9de5-545dc9dc1713",
    "name": "JIRA Worklogs Analysis - PG",
    "description": "",
    "state": "home",
    "readOnly": false,
    "hasBorder": true,
    "thumbnailPath": "img/mix.png",
    "widgetList": [
        {
            "id": "vis995a4232-7a35-4904-b2bd-527539bebafb",
            "layout": {
                "w": 12,
                "h": 7,
                "x": 0,
                "y": 7,
                "i": "vis995a4232-7a35-4904-b2bd-527539bebafb1",
                "moved": false,
                "static": false
            },
            "title": "Work Logs",
            "visualization": "Raw Data Table",
            "source": {
                "name": "issue_worklogs_view",
                "provider": {
                    "name": "Postgrres",
                    "type": "redshift"
                }
            },
            "code": [
                "// Interaction Manager uses filter(), filters(), clientFilter(),",
                "// and clientFilters() to manage filters. To apply additional",
                "// filters, use staticFilters() or your code could be overwritten.",
                "//",
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"Postgrres\");",
                "let source = provider.source(\"issue_worklogs_view\");",
                "// Declare your fields (do not remove this comment line)",
                "const fields = [",
                "    cf.Field(\"author_avatar\", \"Avatar\"),",
                "    cf.Field(\"author_name\", \"Engineer\"),",
                "    cf.Field(\"started\", \"Started\"),",
                "    cf.Field(\"time_spent\", \"Time Spent\"),",
                "    cf.Field(\"comment\", \"Comment\"),",
                "    cf.Field(\"issue_url\", \"Issue url\"),",
                "    cf.Field(\"created\", \"Created\"),",
                "    cf.Field(\"updated\", \"Updated\"),",
                "    cf.Field(\"time_spent_hours\", \"Hours Spent\"),",
                "    cf.Field(\"author_active\", \"Active\"),",
                "];",
                "let myData = source.fields(fields);",
                "let color = cf.Color();",
                "color.theme({",
                "    \"name\": \"standard\",",
                "});",
                "// --- Define chart options and static filters ---",
                "let myChart = myData.graph(\"Raw Data Table\")",
                "    .set(\"color\", color)",
                "    .set(\"columnFilters\", [",
                "    { field: \"author_avatar\", component: \"slicer\" },",
                "    { field: \"author_name\", component: \"slicer\" },",
                "    { field: \"started\", component: \"datePicker\", props: { func: \"DAY\" } },",
                "    { field: \"time_spent\", component: \"slicer\" },",
                "    { field: \"comment\", component: \"slicer\" },",
                "    { field: \"issue_url\", component: \"slicer\" },",
                "    { field: \"created\", component: \"datePicker\", props: { func: \"DAY\" } },",
                "    { field: \"updated\", component: \"datePicker\", props: { func: \"DAY\" } },",
                "    { field: \"time_spent_hours\", component: \"range\" },",
                "    { field: \"author_active\", component: \"slicer\" },",
                "])",
                "    .set(\"customCellFormat\", [",
                "    { field: \"author_avatar\", type: \"img\" },",
                "    { field: \"issue_url\", type: \"url\" },",
                "])",
                "    .set(\"sizeColumnsToFit\", true)",
                "    .limit(100)",
                "    .set(\"columnsWidth\", [",
                "    { \"author_avatar\": 95 },",
                "    { \"author_name\": 142 },",
                "    { \"started\": 213 },",
                "    { \"time_spent\": 132 },",
                "    { \"comment\": 426 },",
                "    { \"issue_url\": 292 },",
                "    { \"created\": 213 },",
                "    { \"updated\": 213 },",
                "    { \"time_spent_hours\": 136 },",
                "    { \"author_active\": 105 }",
                "])",
                "    .set(\"color\", color)",
                "    .set(\"columnFilters\", [",
                "    { field: \"author_avatar\", component: \"slicer\" },",
                "    { field: \"author_name\", component: \"slicer\" },",
                "    { field: \"started\", component: \"datePicker\", props: { func: \"DAY\" } },",
                "    { field: \"time_spent\", component: \"slicer\" },",
                "    { field: \"comment\", component: \"slicer\" },",
                "    { field: \"issue_url\", component: \"slicer\" },",
                "    { field: \"created\", component: \"datePicker\", props: { func: \"DAY\" } },",
                "    { field: \"updated\", component: \"datePicker\", props: { func: \"DAY\" } },",
                "    { field: \"time_spent_hours\", component: \"range\" },",
                "    { field: \"author_active\", component: \"slicer\" },",
                "])",
                "    .set(\"customCellFormat\", [",
                "    { field: \"author_avatar\", type: \"img\" },",
                "    { field: \"issue_url\", type: \"url\" },",
                "])",
                "    .set(\"sort\", [{ \"started\": \"desc\" }])",
                "    .execute();",
                ""
            ],
            "showUI": true,
            "syncedFields": [
                "author_avatar",
                "author_name",
                "started",
                "time_spent",
                "comment",
                "issue_url",
                "created",
                "updated",
                "time_spent_hours",
                "author_active",
                "email_address"
            ],
            "showTitle": true,
            "layerProviders": [],
            "enableClientFilters": false,
            "enableAutoDrill": false,
            "staticFilters": 0,
            "description": null,
            "switchToMultiMetric": true,
            "isCustom": false,
            "savedVars": {}
        },
        {
            "id": "vis38fcc0e2-2b24-4316-8e46-d6bd3c7059ca",
            "layout": {
                "w": 12,
                "h": 7,
                "x": 0,
                "y": 0,
                "i": "vis38fcc0e2-2b24-4316-8e46-d6bd3c7059ca1",
                "moved": false,
                "static": false
            },
            "title": "Heat Map",
            "visualization": "Heat Map",
            "source": {
                "name": "issue_worklogs_view",
                "provider": {
                    "name": "Postgrres",
                    "type": "redshift"
                }
            },
            "code": [
                "// Interaction Manager uses filter(), filters(), clientFilter(),",
                "// and clientFilters() to manage filters. To apply additional",
                "// filters, use staticFilters() or your code could be overwritten.",
                "//",
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"Postgrres\");",
                "let source = provider.source(\"issue_worklogs_view\");",
                "// Define metrics",
                "let metric0 = cf.Metric(\"time_spent_hours\", \"sum\").hideFunction();",
                "let metricColor = cf.Metric(\"time_spent_hours\", \"sum\");",
                "// Define attributes to group by",
                "let group1 = cf.Attribute(\"author_name\")",
                "    .limit(500)",
                "    .sort(\"desc\", cf.Metric(\"time_spent_hours\", \"sum\"));",
                "let group2 = cf.Attribute(\"started\")",
                "    .func(\"DAY\")",
                "    .limit(500)",
                "    .sort(\"asc\", \"started\");",
                "// Add metrics and groups to data source",
                "let myData = source.groupby(group1).colgroupby(group2)",
                "    .metrics(metric0);",
                "// --- Define chart options and static filters ---",
                "// Define Grid",
                "let grid = cf.Grid()",
                "    .top(10)",
                "    .right(10)",
                "    .bottom(10)",
                "    .left(10);",
                "// Define Color Palette",
                "let color = cf.Color()",
                "    .palette([\"#a50026\", \"#d73027\", \"#d73027\", \"#f46d43\", \"#fdae61\", \"#fee090\"])",
                "    .metric(metricColor);",
                "let myChart = myData.graph(\"Heat Map\")",
                "    .set(\"color\", color)",
                "    .set(\"transpose\", false)",
                "    .set(\"showValues\", true)",
                "    .set(\"xAxisPosition\", \"top\")",
                "    .set(\"grid\", grid)",
                "    .set(\"color\", color)",
                "    .set(\"dataZoom\", \"dragFilter\")",
                "    .execute();",
                ""
            ],
            "showUI": true,
            "syncedFields": [
                "author_avatar",
                "author_name",
                "started",
                "time_spent",
                "comment",
                "issue_url",
                "created",
                "updated",
                "time_spent_hours",
                "author_active",
                "email_address"
            ],
            "showTitle": true,
            "layerProviders": [],
            "enableClientFilters": false,
            "enableAutoDrill": false,
            "staticFilters": 0,
            "description": null,
            "switchToMultiMetric": true,
            "isCustom": false,
            "savedVars": {}
        },
        {
            "id": "vis21d029f1-4d20-4d77-81f4-bb642451d36e",
            "layout": {
                "w": 12,
                "h": 7,
                "x": 0,
                "y": 14,
                "i": "vis21d029f1-4d20-4d77-81f4-bb642451d36e1",
                "moved": false,
                "static": false
            },
            "title": "Team Overall Time Worked Trend",
            "visualization": "Trend",
            "source": {
                "name": "issue_worklogs_view",
                "provider": {
                    "name": "Postgrres",
                    "type": "redshift"
                }
            },
            "code": [
                "// Interaction Manager uses filter(), filters(), clientFilter(),",
                "// and clientFilters() to manage filters. To apply additional",
                "// filters, use staticFilters() or your code could be overwritten.",
                "//",
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"Postgrres\");",
                "let source = provider.source(\"issue_worklogs_view\");",
                "// Define metrics",
                "let metric0 = cf.Metric(\"time_spent_hours\", \"sum\").hideFunction();",
                "let metricColor = cf.Metric(\"time_spent_hours\", \"sum\");",
                "// Define attributes to group by",
                "let group1 = cf.Attribute(\"started\")",
                "    .limit(1000).func(\"DAY\")",
                "    .sort(\"asc\", \"started\");",
                "// Add metrics and groups to data source",
                "let myData = source.groupby(group1)",
                "    .metrics(metric0);",
                "// --- Define chart options and static filters ---",
                "// Define Grid",
                "let grid = cf.Grid()",
                "    .top(10)",
                "    .right(10)",
                "    .bottom(10)",
                "    .left(10);",
                "// Define Color Palette",
                "let color = cf.Color()",
                "    .palette([\"#0095b7\", \"#a0b774\", \"#f4c658\", \"#fe8b3e\", \"#cf2f23\", \"#756c56\", \"#007896\", \"#47a694\", \"#f9a94b\", \"#ff6b30\", \"#e94d29\", \"#005b76\"])",
                "    .metric(metricColor);",
                "let myChart = myData.graph(\"Trend\")",
                "    .set(\"fillEmptyValues\", true)",
                "    .set(\"grid\", grid)",
                "    .set(\"color\", color)",
                "    .set(\"dataZoom\", \"dragFilter\")",
                "    .execute();",
                ""
            ],
            "showUI": true,
            "syncedFields": [
                "author_avatar",
                "author_name",
                "started",
                "time_spent",
                "comment",
                "issue_url",
                "created",
                "updated",
                "time_spent_hours",
                "author_active",
                "email_address"
            ],
            "showTitle": true,
            "layerProviders": [],
            "enableClientFilters": false,
            "enableAutoDrill": false,
            "staticFilters": 0,
            "description": null,
            "switchToMultiMetric": true,
            "isCustom": false,
            "savedVars": {}
        },
        {
            "id": "viscc57e20a-9aed-4456-a086-7746d5c2288e",
            "layout": {
                "w": 12,
                "h": 7,
                "x": 0,
                "y": 21,
                "i": "viscc57e20a-9aed-4456-a086-7746d5c2288e1",
                "moved": false,
                "static": false
            },
            "title": "Engineers by hours worked",
            "visualization": "Bars",
            "source": {
                "name": "issue_worklogs_view",
                "provider": {
                    "name": "Postgrres",
                    "type": "redshift"
                }
            },
            "code": [
                "// Interaction Manager uses filter(), filters(), clientFilter(),",
                "// and clientFilters() to manage filters. To apply additional",
                "// filters, use staticFilters() or your code could be overwritten.",
                "//",
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"Postgrres\");",
                "let source = provider.source(\"issue_worklogs_view\");",
                "// Define metrics",
                "let metric0 = cf.Metric(\"time_spent_hours\", \"sum\").hideFunction();",
                "// Define attributes to group by",
                "let group1 = cf.Attribute(\"author_name\")",
                "    .limit(500)",
                "    .sort(\"desc\", cf.Metric(\"time_spent_hours\", \"sum\"));",
                "// Add metrics and groups to data source",
                "let myData = source.groupby(group1)",
                "    .metrics(metric0);",
                "// --- Define chart options and static filters ---",
                "// Define Grid",
                "let grid = cf.Grid()",
                "    .top(10)",
                "    .right(10)",
                "    .bottom(10)",
                "    .left(55);",
                "// Define Color Palette",
                "let color = cf.Color()",
                "    .palette([\"#0095b7\", \"#a0b774\", \"#f4c658\", \"#fe8b3e\", \"#cf2f23\", \"#756c56\", \"#007896\", \"#47a694\", \"#f9a94b\", \"#ff6b30\", \"#e94d29\", \"#005b76\"]);",
                "let myChart = myData.graph(\"Bars\")",
                "    .set(\"grid\", grid)",
                "    .set(\"color\", color)",
                "    .set(\"dataZoom\", \"dragFilter\")",
                "    .set(\"serieLabel\", {",
                "    \"show\": true",
                "})",
                "    .execute();",
                ""
            ],
            "showUI": true,
            "syncedFields": [
                "author_avatar",
                "author_name",
                "started",
                "time_spent",
                "comment",
                "issue_url",
                "created",
                "updated",
                "time_spent_hours",
                "author_active",
                "email_address"
            ],
            "showTitle": true,
            "layerProviders": [],
            "enableClientFilters": true,
            "enableAutoDrill": false,
            "staticFilters": 0,
            "description": null,
            "switchToMultiMetric": true,
            "isCustom": false,
            "savedVars": {}
        }
    ],
    "filters": [],
    "savedFilters": [],
    "folderPath": "/",
    "deletedWidgets": [],
    "IM": {
        "id": "cfs-interaction-manager",
        "isIManager": true,
        "layout": null,
        "title": "Filters",
        "visualization": "Interaction Manager",
        "source": {},
        "code": [
            "let viz2 = getId(\"Engineers by hours worked\");",
            "let viz1 = getId(\"Heat Map\");",
            "let rules1 = { [viz2]: { clientFilters: true }, [viz1]: { clientFilters: false } };",
            "/* Configuration code for the Interaction Manager*/",
            "// Drill hierarchy and rule settings can be done like this:",
            "// let viz1 = getId(\"widget_title_1\")",
            "// let viz2 = getId(\"widget_title_2\")",
            "// let drill = { [viz1]: { group1: []}}",
            "// let rules = { [viz2]: { receive: false }}",
            "// NOTE: Drill hierarchy will change your code!",
            "// Define options",
            "let aktive = cf.create();",
            "let myChart = aktive.graph(\"Interaction Manager\")",
            "    //.set(\"rules\", rules)",
            "    //.set(\"drill\", drill)",
            "    .set(\"rules\", rules1)",
            "    .execute();",
            ""
        ],
        "showUI": false,
        "syncedFields": [],
        "showTitle": true,
        "layerProviders": [],
        "enableClientFilters": false,
        "enableAutoDrill": false,
        "staticFilters": 0,
        "description": null,
        "switchToMultiMetric": true,
        "isCustom": false,
        "savedVars": {}
    },
    "hideIM": false,
    "metadata": {
        "Postgrres": [
            "let _META_ = {",
            "    \"issue_worklogs_view\": {",
            "        \"fields\": {",
            "            \"author_avatar\": {",
            "                \"label\": \"Avatar\"",
            "            },",
            "            \"author_name\": {",
            "                \"label\": \"Engineer\"",
            "            },",
            "            \"started\": {",
            "                \"label\": \"Started\"",
            "            },",
            "            \"time_spent\": {",
            "                \"label\": \"Time Spent\"",
            "            },",
            "            \"comment\": {",
            "                \"label\": \"Comment\"",
            "            },",
            "            \"issue_url\": {",
            "                \"label\": \"Issue url\"",
            "            },",
            "            \"created\": {",
            "                \"label\": \"Created\"",
            "            },",
            "            \"updated\": {",
            "                \"label\": \"Updated\"",
            "            },",
            "            \"time_spent_hours\": {",
            "                \"label\": \"Hours Spent\"",
            "            },",
            "            \"author_active\": {",
            "                \"label\": \"Active\"",
            "            },",
            "            \"email_address\": {",
            "                \"label\": \"Email address\"",
            "            }",
            "        }",
            "    }",
            "};",
            ""
        ]
    },
    "customQueries": {
        "Postgrres": [
            {
                "name": "issue_worklogs_view",
                "query": "--Type your query here\nSELECT\n  worklogs.author->>'active'                               AS author_active,\n  worklogs.author->'avatarUrls'->>'32x32'                  AS author_avatar,\n  worklogs.author->>'displayName'                          AS author_name,\n  worklogs.author->>'emailAddress'                         AS email_address,\n  worklogs.comment\n          ->'content'->0\n          ->'content'->0\n          ->>'text'                                     AS comment,\n  'https://${JIRA_DOMAIN}/issues/' || issues.key    AS issue_url,\n  worklogs.started,\n  worklogs.created,\n  worklogs.updated,\n  worklogs.\"timeSpent\"                                     AS time_spent,\n  worklogs.\"timeSpentSeconds\"  / 3600.0                   AS time_spent_hours\nFROM jira.issue_worklogs AS worklogs\nLEFT JOIN jira.issues      AS issues\n  ON worklogs.\"issueId\" = issues.id",
                "type": "QUERY"
            }
        ]
    }
}||||[
    {
        "name": "Postgrres",
        "url": "http://localhost:3000",
        "redirectOnSameTab": true,
        "active": true,
        "provider": "redshift",
        "id": "f3500fca-e2c4-4c26-88fd-39387b920219"
    }
]